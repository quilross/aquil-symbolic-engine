{
  "schema": {
    "operations": [
      {
        "operationId": "manageCommitment",
        "path": "/api/commitments/create",
        "method": "POST",
        "summary": "Create and manage personal commitments",
        "description": "Called to create or update personal commitments and micro-practices. Triggers on: create commitment, make commitment, commit to, promise to, accountability.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": [
                      "create",
                      "update"
                    ],
                    "description": "Type of commitment action to perform"
                  },
                  "commitment": {
                    "type": "string",
                    "description": "Detailed commitment description"
                  },
                  "timeframe": {
                    "type": "string",
                    "description": "Timeline for commitment completion"
                  },
                  "micro_practice": {
                    "type": "boolean",
                    "description": "Whether this is a micro-practice commitment"
                  }
                },
                "required": [
                  "action",
                  "commitment"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Commitment management results with tracking info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "commitment_id": {
                      "type": "string",
                      "description": "Unique commitment identifier"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "created",
                        "updated"
                      ],
                      "description": "Operation result"
                    },
                    "commitment_details": {
                      "type": "object",
                      "description": "Full commitment information"
                    },
                    "tracking_plan": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Suggested tracking methods"
                    },
                    "next_steps": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Recommended next actions"
                    },
                    "session_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "commitment_id",
                    "status"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "listActiveCommitments",
        "path": "/api/commitments/active",
        "method": "GET",
        "summary": "List active commitments",
        "description": "Called to retrieve current active commitments and their progress. Triggers on: show commitments, list commitments, my commitments, current commitments.",
        "responses": {
          "200": {
            "description": "Active commitments with progress tracking",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "active_commitments": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "List of current commitments"
                    },
                    "completion_summary": {
                      "type": "object",
                      "description": "Overall progress summary"
                    },
                    "upcoming_milestones": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Next important milestones"
                    },
                    "recommendations": {
                      "type": "string",
                      "description": "Guidance based on current progress"
                    },
                    "total_count": {
                      "type": "integer",
                      "description": "Total number of active commitments"
                    }
                  },
                  "required": [
                    "active_commitments",
                    "total_count"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true
      },
      {
        "operationId": "queryD1Database",
        "path": "/api/d1/query",
        "method": "POST",
        "summary": "Direct D1 database queries",
        "description": "Called when complex database operations or custom SQL queries are needed. Triggers on: 'query the database', 'run SQL', 'database lookup', 'custom data query', 'search database records'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sql": {
                    "type": "string",
                    "description": "SQL query to execute on the D1 database"
                  },
                  "params": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Parameters to bind to the SQL query"
                  }
                },
                "required": [
                  "sql"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Query results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "meta": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "consequential": true
      },
      {
        "operationId": "storeInKV",
        "path": "/api/kv/log",
        "method": "POST",
        "summary": "Store data in KV storage",
        "description": "Called when fast key-value storage is needed for quick data access. Triggers on: 'save this data', 'store quickly', 'cache this information', 'remember this setting', 'store configuration'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Key under which to store the data"
                  },
                  "value": {
                    "type": "object",
                    "description": "Data to store in key-value format"
                  },
                  "expirationTtl": {
                    "type": "integer",
                    "description": "Time-to-live in seconds for the stored data"
                  }
                },
                "required": [
                  "key",
                  "value"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "KV storage result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "consequential": true
      },
      {
        "operationId": "upsertVectors",
        "path": "/api/vectorize/upsert",
        "method": "POST",
        "summary": "Store vectors in the index",
        "description": "Called when vector embeddings need to be stored for semantic search. Triggers on: 'index this content', 'create embeddings', 'store for similarity search', 'add to vector database', 'semantic indexing'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier for the vector"
                  },
                  "vector": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "description": "Vector values (1024-dimensional array)"
                  },
                  "text": {
                    "type": "string",
                    "description": "Text to convert to vector (alternative to providing vector directly)"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata to store with the vector"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upsert results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "upsertedCount": {
                      "type": "integer"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "consequential": true
      },
      {
        "operationId": "trustCheckIn",
        "path": "/api/trust/check-in",
        "method": "POST",
        "summary": "Trust and self-confidence building",
        "description": "Called when user expresses self-doubt, anxiety, fear of judgment, mentions feeling unsafe, or needs confidence support. CREATES trust-building insights and confidence strategies. Triggers on: 'I don't trust myself', 'feeling anxious', 'not confident about', 'scared to try', 'doubt', 'uncertainty'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_state": {
                    "type": "string",
                    "description": "Current emotional/trust state description"
                  },
                  "trust_level": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10,
                    "description": "Self-assessed trust level 1-10"
                  }
                },
                "required": [
                  "current_state"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trust building session results with insights and recommendations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "trust_score": {
                      "type": "number",
                      "description": "Calculated trust score 0-10"
                    },
                    "insights": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Trust-building insights"
                    },
                    "recommendations": {
                      "type": "string",
                      "description": "Specific trust-building actions"
                    },
                    "confidence_patterns": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "session_id": {
                      "type": "string"
                    },
                    "voice_used": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "trust_score",
                    "insights",
                    "recommendations"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "somaticHealingSession",
        "path": "/api/somatic/session",
        "method": "POST",
        "summary": "Somatic healing and body wisdom",
        "description": "Called when user mentions physical sensations, body awareness, tension, stress, breathing, or embodied emotions. Triggers on: 'feeling tight', 'body tension', 'breathing', 'physical sensation', 'stress in my body'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body_state": {
                    "type": "string",
                    "description": "Current physical/emotional state in the body"
                  },
                  "intention": {
                    "type": "string",
                    "description": "Healing intention or desired outcome"
                  }
                },
                "required": [
                  "body_state"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Somatic session results with embodied insights",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "body_wisdom": {
                      "type": "string",
                      "description": "Insights from body awareness"
                    },
                    "somatic_practices": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Recommended body practices"
                    },
                    "tension_areas": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Areas of tension identified"
                    },
                    "breathing_guidance": {
                      "type": "string",
                      "description": "Specific breathing recommendations"
                    },
                    "emotional_release": {
                      "type": "string",
                      "description": "Emotional insights from body work"
                    },
                    "session_id": {
                      "type": "string"
                    },
                    "voice_used": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "body_wisdom",
                    "somatic_practices"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "extractMediaWisdom",
        "path": "/api/media/extract-wisdom",
        "method": "POST",
        "summary": "Extract wisdom from media consumption",
        "description": "Called when user discusses consuming, watching, or reading media content (movies, books, music, podcasts, videos). Triggers on: 'watched a movie', 'reading this book', 'listened to', 'saw this documentary', media reactions and reviews.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "media_type": {
                    "type": "string",
                    "description": "Type of media (movie, book, music, podcast, etc.)"
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of the media content"
                  },
                  "personal_reaction": {
                    "type": "string",
                    "description": "User's personal reaction or thoughts about the media"
                  }
                },
                "required": [
                  "media_type",
                  "title",
                  "personal_reaction"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Media wisdom extraction with insights",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "extracted_wisdom": {
                      "type": "string",
                      "description": "Key wisdom and insights from the media"
                    },
                    "personal_connections": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "How insights connect to user's life"
                    },
                    "actionable_takeaways": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Practical applications"
                    },
                    "emotional_resonance": {
                      "type": "string",
                      "description": "Emotional impact and significance"
                    },
                    "related_themes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Connected themes and patterns"
                    },
                    "session_id": {
                      "type": "string"
                    },
                    "media_type": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "extracted_wisdom",
                    "personal_connections"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "recognizePatterns",
        "path": "/api/patterns/recognize",
        "method": "POST",
        "summary": "Recognize behavioral and emotional patterns",
        "description": "Called when user mentions repeated behaviors, habits, emotional patterns, cycles, or asks 'why do I always...?'. Triggers on: recurring themes, 'I keep doing', 'this always happens', 'pattern', 'cycle', behavioral loops.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pattern_description": {
                    "type": "string",
                    "description": "Description of the observed pattern"
                  },
                  "frequency": {
                    "type": "string",
                    "enum": [
                      "daily",
                      "weekly",
                      "monthly",
                      "situational"
                    ],
                    "description": "How often this pattern occurs"
                  },
                  "context": {
                    "type": "string",
                    "description": "Situations where pattern appears"
                  }
                },
                "required": [
                  "pattern_description"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pattern recognition results with insights and recommendations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "identified_patterns": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Recognized behavioral patterns"
                    },
                    "root_causes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Potential underlying causes"
                    },
                    "recommendations": {
                      "type": "string",
                      "description": "Specific actions to address patterns"
                    },
                    "pattern_strength": {
                      "type": "number",
                      "description": "Pattern clarity/strength 0-10"
                    },
                    "session_id": {
                      "type": "string"
                    },
                    "insights": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "identified_patterns",
                    "recommendations"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "standingTallPractice",
        "path": "/api/standing-tall/practice",
        "method": "POST",
        "summary": "Standing tall confidence practice",
        "description": "Called when user mentions confidence issues, posture, self-presentation, or feeling small/inadequate. Triggers on: 'standing tall', 'feeling small', 'posture', 'presence', 'confidence in room', 'how I carry myself'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "confidence_area": {
                    "type": "string",
                    "description": "Specific area where confidence building is needed"
                  },
                  "current_challenge": {
                    "type": "string",
                    "description": "Current confidence challenge or situation"
                  }
                },
                "required": [
                  "confidence_area"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standing tall practice with confidence building",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "confidence_boost": {
                      "type": "string",
                      "description": "Confidence building guidance"
                    },
                    "posture_tips": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Physical posture recommendations"
                    },
                    "presence_practices": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Presence and grounding exercises"
                    },
                    "confidence_score": {
                      "type": "number",
                      "description": "Assessed confidence level 0-10"
                    },
                    "empowerment_affirmations": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Personal empowerment statements"
                    },
                    "session_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "confidence_boost",
                    "posture_tips"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "synthesizeWisdom",
        "path": "/api/wisdom/synthesize",
        "method": "POST",
        "summary": "Synthesize wisdom from experiences",
        "description": "Called to integrate insights from multiple experiences, conversations, or when user reflects on lessons learned. Triggers on: 'what I learned', 'connecting the dots', 'putting it together', insights integration.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "experiences": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of experiences or insights to synthesize"
                  },
                  "focus_area": {
                    "type": "string",
                    "description": "Specific area to focus synthesis on"
                  }
                },
                "required": [
                  "experiences"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wisdom synthesis results with integrated insights",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "synthesized_wisdom": {
                      "type": "string",
                      "description": "Integrated wisdom from experiences"
                    },
                    "key_themes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Main themes identified"
                    },
                    "actionable_insights": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Practical takeaways"
                    },
                    "wisdom_level": {
                      "type": "number",
                      "description": "Depth of synthesis 0-10"
                    },
                    "session_id": {
                      "type": "string"
                    },
                    "voice_used": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "synthesized_wisdom",
                    "key_themes",
                    "actionable_insights"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "getDailySynthesis",
        "path": "/api/wisdom/daily-synthesis",
        "method": "GET",
        "summary": "Get daily wisdom synthesis",
        "description": "Called automatically at conversation start or when user wants daily insights recap. Retrieves accumulated insights and wisdom from recent sessions. Triggers on: daily summary, today's insights, daily wisdom, morning check-in.",
        "responses": {
          "200": {
            "description": "Daily wisdom synthesis with recent insights",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "daily_synthesis": {
                      "type": "string",
                      "description": "Synthesized daily wisdom"
                    },
                    "key_insights": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Main insights from today"
                    },
                    "growth_areas": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Areas showing growth"
                    },
                    "recommendations": {
                      "type": "string",
                      "description": "Daily recommendations"
                    },
                    "focus_area": {
                      "type": "string"
                    },
                    "session_count": {
                      "type": "integer",
                      "description": "Number of sessions included"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "daily_synthesis",
                    "key_insights"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "focus_area",
            "in": "query",
            "description": "Specific area to focus on (e.g., 'relationships', 'career', 'health'). Leave blank for general daily insights.",
            "schema": {
              "type": "string"
            },
            "example": "career_growth"
          }
        ],
        "autonomous": true
      },
      {
        "operationId": "getPersonalInsights",
        "path": "/api/insights",
        "method": "GET",
        "summary": "Get personal insights and patterns",
        "description": "Called automatically when relevant patterns emerge or user asks about their growth journey. Retrieves accumulated personal insights and behavioral patterns. Triggers on: my insights, personal patterns, growth insights, what have I learned.",
        "responses": {
          "200": {
            "description": "Personal insights and growth patterns",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "insights": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Personal insights discovered"
                    },
                    "patterns": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Behavioral/emotional patterns"
                    },
                    "growth_trajectory": {
                      "type": "string",
                      "description": "Overall growth direction"
                    },
                    "strengths": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Identified strengths"
                    },
                    "focus_area": {
                      "type": "string"
                    },
                    "confidence_level": {
                      "type": "number",
                      "description": "Current confidence assessment 0-10"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "insights",
                    "patterns"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "focus_area",
            "in": "query",
            "description": "Specific insight area (e.g., 'relationships', 'confidence', 'decision_making'). Leave blank for all insights.",
            "schema": {
              "type": "string"
            },
            "example": "confidence_patterns"
          }
        ],
        "autonomous": true
      },
      {
        "operationId": "generateJournalInsight",
        "path": "/api/insight",
        "method": "POST",
        "summary": "Generate insights from journal entries",
        "description": "Called to analyze current journal entry against user history and generate insights about recurring themes or contradictions. Triggers on: analyze my entry, what patterns do you see, insight from my writing, journal analysis.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currentEntry": {
                    "type": "object",
                    "description": "The current journal entry to analyze",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Entry identifier"
                      },
                      "content": {
                        "type": "string",
                        "description": "Entry content/text"
                      },
                      "timestamp": {
                        "type": "string",
                        "description": "Entry timestamp"
                      }
                    },
                    "required": [
                      "content"
                    ]
                  },
                  "prefix": {
                    "type": "string",
                    "description": "Optional prefix for retrieving user history (default: 'log_')"
                  }
                },
                "required": [
                  "currentEntry"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generated insight from journal analysis",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "insight": {
                      "type": "string",
                      "description": "Generated insight about patterns, themes, or contradictions"
                    }
                  },
                  "required": [
                    "insight"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Insight generation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "submitFeedback",
        "path": "/api/feedback",
        "method": "POST",
        "summary": "Submit feedback on experiences",
        "description": "Called when user wants to provide feedback on practices, insights, or experiences. Triggers on: 'how was that', 'feedback on', 'what worked', 'didn't work for me', reflection on effectiveness.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of feedback being provided"
                  },
                  "content": {
                    "type": "string",
                    "description": "Detailed feedback content"
                  },
                  "rating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10,
                    "description": "Numerical rating if applicable (1-10)"
                  }
                },
                "required": [
                  "type",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feedback submission with acknowledgment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "feedback_received": {
                      "type": "boolean",
                      "description": "Whether feedback was successfully recorded"
                    },
                    "feedback_summary": {
                      "type": "string",
                      "description": "Summary of the feedback provided"
                    },
                    "insights_gained": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Insights from the feedback"
                    },
                    "adjustments": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Suggested adjustments based on feedback"
                    },
                    "appreciation": {
                      "type": "string",
                      "description": "Acknowledgment of the feedback"
                    },
                    "session_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "feedback_received",
                    "feedback_summary"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "consequential": true
      },
      {
        "operationId": "generateDiscoveryInquiry",
        "path": "/api/discovery/generate-inquiry",
        "method": "POST",
        "summary": "Generate discovery questions and inquiries",
        "description": "Called when user wants deeper self-exploration or feels stuck and needs guidance. Triggers on: 'need to think deeper', 'explore this more', 'what questions should I ask', 'dig deeper', self-discovery requests.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "focus_area": {
                    "type": "string",
                    "description": "Area of life or topic to explore deeper"
                  },
                  "depth_level": {
                    "type": "string",
                    "enum": [
                      "surface",
                      "medium",
                      "deep"
                    ],
                    "description": "How deep to go in the exploration"
                  },
                  "context": {
                    "type": "string",
                    "description": "Current situation or context for the inquiry"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Discovery inquiry with deep questions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "inquiry_questions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Deep exploration questions"
                    },
                    "focus_area": {
                      "type": "string",
                      "description": "Area of exploration"
                    },
                    "depth_guidance": {
                      "type": "string",
                      "description": "How to go deeper"
                    },
                    "reflection_prompts": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Reflection exercises"
                    },
                    "exploration_path": {
                      "type": "string",
                      "description": "Suggested exploration journey"
                    },
                    "session_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "inquiry_questions",
                    "focus_area"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "interpretDream",
        "path": "/api/dreams/interpret",
        "method": "POST",
        "summary": "Interpret dreams and subconscious symbols",
        "description": "Called when user shares dreams, nightmares, or discusses subconscious content and symbolism. Triggers on: 'had a dream', 'nightmare', 'dreamed about', 'what does this mean', dream symbols.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dream_content": {
                    "type": "string",
                    "description": "Detailed description of the dream"
                  },
                  "emotional_tone": {
                    "type": "string",
                    "description": "Overall emotional feeling of the dream"
                  },
                  "symbols_noticed": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specific symbols or elements noticed in the dream"
                  }
                },
                "required": [
                  "dream_content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Dream interpretation with symbolic insights",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "interpretation": {
                      "type": "string",
                      "description": "Dream interpretation and meaning"
                    },
                    "symbolic_elements": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Symbol meanings and significance"
                    },
                    "emotional_themes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Underlying emotional themes"
                    },
                    "life_connections": {
                      "type": "string",
                      "description": "How dream connects to waking life"
                    },
                    "subconscious_messages": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Messages from subconscious"
                    },
                    "integration_suggestions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "How to integrate insights"
                    },
                    "session_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "interpretation",
                    "symbolic_elements"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "optimizeEnergy",
        "path": "/api/energy/optimize",
        "method": "POST",
        "summary": "Optimize energy levels and vitality",
        "description": "Called when user discusses tiredness, energy levels, vitality, or feeling drained/energized. Triggers on: 'feeling tired', 'low energy', 'drained', 'exhausted', 'need more energy', vitality concerns.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_energy": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10,
                    "description": "Current energy level on a scale of 1-10"
                  },
                  "energy_patterns": {
                    "type": "string",
                    "description": "Observed patterns in energy levels"
                  },
                  "challenges": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Current energy challenges or drains"
                  }
                },
                "required": [
                  "current_energy"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Energy optimization with vitality enhancement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "energy_assessment": {
                      "type": "number",
                      "description": "Current energy level 0-10"
                    },
                    "optimization_strategies": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Energy boosting strategies"
                    },
                    "vitality_practices": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Vitality enhancement practices"
                    },
                    "energy_drains": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Identified energy drains"
                    },
                    "renewal_plan": {
                      "type": "string",
                      "description": "Personalized energy renewal plan"
                    },
                    "session_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "energy_assessment",
                    "optimization_strategies"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "clarifyValues",
        "path": "/api/values/clarify",
        "method": "POST",
        "summary": "Clarify personal values and priorities",
        "description": "Called when user discusses personal values, life priorities, what matters most, or feeling unclear about direction. Triggers on: 'what matters to me', 'my values', 'priorities', 'life direction', 'what's important'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "life_area": {
                    "type": "string",
                    "description": "Area of life to clarify values for"
                  },
                  "current_values": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Currently identified or assumed values"
                  },
                  "conflicts_or_questions": {
                    "type": "string",
                    "description": "Areas of value conflict or uncertainty"
                  }
                },
                "required": [
                  "life_area"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Values clarification with priority guidance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "core_values": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Identified core values"
                    },
                    "value_priorities": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Prioritized values with explanations"
                    },
                    "life_alignment": {
                      "type": "string",
                      "description": "How current life aligns with values"
                    },
                    "alignment_gaps": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Areas where values aren't being honored"
                    },
                    "action_steps": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Steps to better align with values"
                    },
                    "session_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "core_values",
                    "value_priorities"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "unleashCreativity",
        "path": "/api/creativity/unleash",
        "method": "POST",
        "summary": "Unleash creative potential",
        "description": "Called when user discusses creative blocks, artistic inspiration, or unleashing creativity. Triggers on: 'creative block', 'stuck creatively', 'need inspiration', 'creative flow', artistic expression.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "creative_domain": {
                    "type": "string",
                    "description": "Domain or area of creative expression"
                  },
                  "current_blocks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Current creative blocks or challenges"
                  },
                  "inspiration_sources": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Sources that typically inspire creativity"
                  }
                },
                "required": [
                  "creative_domain"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creativity unleashing with inspiration boost",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "creative_insights": {
                      "type": "string",
                      "description": "Creative breakthrough insights"
                    },
                    "inspiration_sources": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Sources of creative inspiration"
                    },
                    "creative_exercises": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Creativity boosting exercises"
                    },
                    "block_removal": {
                      "type": "string",
                      "description": "Strategies for removing creative blocks"
                    },
                    "flow_state_guidance": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "How to enter creative flow"
                    },
                    "session_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "creative_insights",
                    "inspiration_sources"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "cultivateAbundance",
        "path": "/api/abundance/cultivate",
        "method": "POST",
        "summary": "Cultivate abundance mindset",
        "description": "Called when user discusses financial stress, scarcity mindset, or abundance blocks. Triggers on: 'not enough money', 'can't afford', 'scarcity', 'abundance', 'financial stress', money mindset.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scarcity_areas": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Areas where scarcity mindset is experienced"
                  },
                  "abundance_goals": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Desired abundance outcomes or goals"
                  },
                  "current_mindset": {
                    "type": "string",
                    "description": "Current mindset around abundance/scarcity"
                  }
                },
                "required": [
                  "scarcity_areas"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Abundance cultivation with mindset shift",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "abundance_insights": {
                      "type": "string",
                      "description": "Key abundance mindset insights"
                    },
                    "scarcity_patterns": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Identified scarcity patterns"
                    },
                    "abundance_practices": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Daily abundance practices"
                    },
                    "mindset_shifts": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Required mindset changes"
                    },
                    "gratitude_focus": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Areas for gratitude practice"
                    },
                    "session_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "abundance_insights",
                    "scarcity_patterns"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "navigateTransitions",
        "path": "/api/transitions/navigate",
        "method": "POST",
        "summary": "Navigate life transitions",
        "description": "Called when user discusses major life changes, transitions, or feeling 'stuck between phases'. Triggers on: job changes, relationship changes, moving, career shifts, 'big decision', 'life change', 'transition', 'next chapter'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transition_type": {
                    "type": "string",
                    "description": "Type of transition (career, relationship, location, etc.)"
                  },
                  "current_stage": {
                    "type": "string",
                    "description": "Where they are in the transition process"
                  },
                  "challenges": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Current challenges faced"
                  },
                  "support_needed": {
                    "type": "string",
                    "description": "Type of support needed"
                  }
                },
                "required": [
                  "transition_type",
                  "current_stage"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transition navigation guidance and support",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "navigation_guidance": {
                      "type": "string",
                      "description": "Specific guidance for this transition"
                    },
                    "transition_stages": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Stages of this transition type"
                    },
                    "coping_strategies": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Strategies for managing transition"
                    },
                    "support_resources": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Recommended support resources"
                    },
                    "timeline_expectations": {
                      "type": "string",
                      "description": "Realistic timeline for transition"
                    },
                    "session_id": {
                      "type": "string"
                    },
                    "voice_used": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "navigation_guidance",
                    "coping_strategies"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "healAncestry",
        "path": "/api/ancestry/heal",
        "method": "POST",
        "summary": "Ancestral healing and lineage work",
        "description": "Called when user discusses family dynamics, generational patterns, or ancestral healing work. Triggers on: 'family patterns', 'like my parents', 'generational', 'family trauma', 'ancestral healing'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "family_patterns": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Identified family or generational patterns"
                  },
                  "healing_intention": {
                    "type": "string",
                    "description": "What the user hopes to heal or transform"
                  },
                  "ancestral_gifts": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Positive ancestral gifts to acknowledge"
                  }
                },
                "required": [
                  "family_patterns",
                  "healing_intention"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ancestral healing with generational insights",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "healing_insights": {
                      "type": "string",
                      "description": "Ancestral healing insights and guidance"
                    },
                    "family_patterns": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Identified family patterns"
                    },
                    "generational_gifts": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Positive ancestral gifts to claim"
                    },
                    "pattern_breaking": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Ways to break negative patterns"
                    },
                    "lineage_wisdom": {
                      "type": "string",
                      "description": "Wisdom to carry forward"
                    },
                    "healing_practices": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Ancestral healing practices"
                    },
                    "session_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "healing_insights",
                    "family_patterns"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "ragMemoryConsolidation",
        "path": "/api/rag/memory",
        "method": "POST",
        "summary": "RAG memory consolidation and learning",
        "description": "Called when insights need to be stored for future retrieval and learning. Triggers on: 'remember this insight', 'store this learning', 'consolidate wisdom', 'save for later reference', 'important to remember'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "Content to store for future retrieval"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "insight",
                      "pattern",
                      "wisdom",
                      "reflection"
                    ],
                    "description": "Type of content (insight, pattern, wisdom, reflection)"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata for the stored content"
                  },
                  "importance": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10,
                    "default": 5,
                    "description": "Importance level of the content (1-10)"
                  }
                },
                "required": [
                  "content",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memory consolidation results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "stored": {
                      "type": "boolean"
                    },
                    "memory_id": {
                      "type": "string"
                    },
                    "embedding_created": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "consequential": true
      },
      {
        "operationId": "trackMoodAndEmotions",
        "path": "/api/mood/track",
        "method": "POST",
        "summary": "Track mood and emotional states",
        "description": "Called when user mentions feelings, emotions, mood changes, or emotional states. TRACKS and ANALYZES emotional patterns for mood insights and regulation. Triggers on: 'feeling sad', 'happy today', 'mood is', 'emotionally', 'my feelings'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_mood": {
                    "type": "string",
                    "description": "Current emotional state"
                  },
                  "mood_scale": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10,
                    "description": "Mood rating 1-10"
                  },
                  "triggers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "What influenced this mood"
                  },
                  "context": {
                    "type": "string",
                    "description": "Situational context"
                  }
                },
                "required": [
                  "current_mood",
                  "mood_scale"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mood tracking with emotional insights",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mood_insights": {
                      "type": "string",
                      "description": "Emotional insights and patterns"
                    },
                    "mood_trends": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Identified mood patterns"
                    },
                    "emotional_guidance": {
                      "type": "string",
                      "description": "Emotional regulation guidance"
                    },
                    "mood_boosters": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Mood improvement suggestions"
                    },
                    "session_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "mood_insights",
                    "emotional_guidance"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "setPersonalGoals",
        "path": "/api/goals/set",
        "method": "POST",
        "summary": "Set and track personal goals",
        "description": "Called when user discusses goals, aspirations, or future plans. Triggers on: 'my goal is', 'want to achieve', 'planning to', 'aspire to', goal-setting.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "goal_description": {
                    "type": "string",
                    "description": "Goal description and details"
                  },
                  "goal_category": {
                    "type": "string",
                    "enum": [
                      "personal",
                      "professional",
                      "health",
                      "relationships",
                      "financial",
                      "creative"
                    ],
                    "description": "Goal category"
                  },
                  "timeline": {
                    "type": "string",
                    "description": "Desired timeline for achievement"
                  },
                  "motivation": {
                    "type": "string",
                    "description": "Why this goal matters"
                  }
                },
                "required": [
                  "goal_description",
                  "goal_category"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Goal setting with action plan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "goal_id": {
                      "type": "string",
                      "description": "Unique goal identifier"
                    },
                    "action_plan": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Step-by-step action plan"
                    },
                    "milestones": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Key milestones and checkpoints"
                    },
                    "success_metrics": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "How to measure success"
                    },
                    "potential_obstacles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Anticipated challenges"
                    },
                    "session_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "goal_id",
                    "action_plan",
                    "milestones"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "designHabits",
        "path": "/api/habits/design",
        "method": "POST",
        "summary": "Design and optimize habits",
        "description": "Called when user wants to build new habits or break old ones. DESIGNS personalized habit systems and CREATES behavior change strategies. Triggers on: 'want to start', 'habit', 'routine', 'stop doing', 'build consistency'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "habit_type": {
                    "type": "string",
                    "enum": [
                      "build",
                      "break",
                      "modify"
                    ],
                    "description": "Type of habit change"
                  },
                  "habit_description": {
                    "type": "string",
                    "description": "Detailed habit description"
                  },
                  "current_frequency": {
                    "type": "string",
                    "description": "Current frequency if existing habit"
                  },
                  "desired_outcome": {
                    "type": "string",
                    "description": "What success looks like"
                  }
                },
                "required": [
                  "habit_type",
                  "habit_description"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Habit design with implementation strategy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "habit_plan": {
                      "type": "string",
                      "description": "Detailed habit implementation plan"
                    },
                    "trigger_design": {
                      "type": "string",
                      "description": "Habit trigger and cue design"
                    },
                    "reward_system": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Reward and motivation system"
                    },
                    "tracking_method": {
                      "type": "string",
                      "description": "How to track progress"
                    },
                    "difficulty_progression": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Gradual difficulty increase"
                    },
                    "session_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "habit_plan",
                    "trigger_design"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "systemHealthCheck",
        "path": "/api/system/health-check",
        "method": "GET",
        "summary": "System health check and readiness status",
        "description": "Automatically checks system health and readiness of all Cloudflare Worker bindings. Called for system monitoring and troubleshooting. Triggers on: system status, health check, system working, is everything ok.",
        "responses": {
          "200": {
            "description": "System health and readiness report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ready": {
                      "type": "boolean"
                    },
                    "components": {
                      "type": "object",
                      "properties": {
                        "d1_database": {
                          "type": "boolean"
                        },
                        "kv_storage": {
                          "type": "boolean"
                        },
                        "r2_storage": {
                          "type": "boolean"
                        },
                        "vectorize": {
                          "type": "boolean"
                        },
                        "ai_gateway": {
                          "type": "boolean"
                        }
                      }
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ready",
                    "components",
                    "timestamp"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true
      },
      {
        "operationId": "logDataOrEvent",
        "path": "/api/log",
        "method": "POST",
        "summary": "Log conversation events and insights",
        "description": "Called AUTOMATICALLY to log chat messages, insights, breakthroughs, and meaningful moments. Triggers on: conversation events, emotional moments, insights, breakthroughs, important statements.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "chat_message",
                    "description": "Event type (chat_message, insight, breakthrough, emotion, etc.)"
                  },
                  "who": {
                    "type": "string",
                    "default": "user",
                    "description": "Who generated this event (user, assistant, system)"
                  },
                  "level": {
                    "type": "string",
                    "default": "info",
                    "description": "Importance level (debug, info, significant, breakthrough)"
                  },
                  "payload": {
                    "type": "object",
                    "description": "Event data and context"
                  }
                },
                "required": [
                  "payload"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Log stored successfully with metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logged": {
                      "type": "boolean"
                    },
                    "log_id": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "storage_location": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "logged",
                    "log_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "retrieveLogsOrDataEntries",
        "path": "/api/logs",
        "method": "GET",
        "summary": "Retrieve conversation history and context",
        "description": "Called AUTOMATICALLY to gather conversation history and context for continuity. Essential for understanding user's journey and maintaining conversation flow. Triggers on: conversation start, context needed, history review.",
        "responses": {
          "200": {
            "description": "Conversation history with context metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Conversation log entries"
                    },
                    "context_summary": {
                      "type": "string",
                      "description": "Overall conversation context"
                    },
                    "key_themes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Major conversation themes"
                    },
                    "total_entries": {
                      "type": "integer"
                    },
                    "time_span": {
                      "type": "string",
                      "description": "Time period covered"
                    }
                  },
                  "required": [
                    "logs",
                    "total_entries"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of entries to retrieve (1-200). Higher numbers provide more context but may slow response.",
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 200
            },
            "example": 50
          }
        ],
        "autonomous": true
      },
      {
        "operationId": "logDataOrEvent",
        "path": "/api/log",
        "method": "POST",
        "summary": "Log any data or conversation event",
        "description": "Called AUTOMATICALLY for logging chat messages, insights, breakthroughs, emotional moments, or any meaningful conversation moment. Essential for continuity and pattern recognition.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "chat_message",
                    "description": "Event type (chat_message, insight, breakthrough, emotion, etc.)"
                  },
                  "who": {
                    "type": "string",
                    "default": "user",
                    "description": "Who generated this event (user, assistant, system)"
                  },
                  "level": {
                    "type": "string",
                    "default": "info",
                    "description": "Importance level (debug, info, significant, breakthrough)"
                  },
                  "payload": {
                    "type": "object",
                    "description": "Event data and context"
                  }
                },
                "required": [
                  "payload"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Log stored successfully with metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logged": {
                      "type": "boolean"
                    },
                    "log_id": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "storage_location": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "logged",
                    "log_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid log data or parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Logging operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true,
        "consequential": true
      },
      {
        "operationId": "retrieveLogsOrDataEntries",
        "path": "/api/logs",
        "method": "GET",
        "summary": "Retrieve conversation history and context",
        "description": "Called AUTOMATICALLY to gather conversation history and context for continuity. Essential for understanding user's journey and maintaining conversation flow.",
        "responses": {
          "200": {
            "description": "Conversation history with context metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Conversation log entries"
                    },
                    "context_summary": {
                      "type": "string",
                      "description": "Overall conversation context"
                    },
                    "key_themes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Major conversation themes"
                    },
                    "total_entries": {
                      "type": "integer"
                    },
                    "time_span": {
                      "type": "string",
                      "description": "Time period covered"
                    }
                  },
                  "required": [
                    "logs",
                    "total_entries"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of entries to retrieve (1-200). Higher numbers provide more context but may slow response.",
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 200
            },
            "example": 50
          }
        ],
        "autonomous": true
      },
      {
        "operationId": "advancedLoggingOperations",
        "path": "/api/logs",
        "method": "POST",
        "summary": "Advanced logging operations (KV, D1, promotion)",
        "description": "Called for advanced logging operations including storage control and data promotion between KV and D1 systems. Handles complex logging workflows when standard logging needs enhancement.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operation": {
                    "type": "string",
                    "enum": [
                      "kv-write",
                      "d1-insert",
                      "promote",
                      "retrieve",
                      "latest",
                      "retrieval-meta"
                    ],
                    "description": "Type of logging operation to perform"
                  },
                  "payload": {
                    "type": "object",
                    "description": "Operation-specific data and parameters"
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique identifier for the log entry or operation"
                  },
                  "type": {
                    "type": "string",
                    "description": "Log entry type or category"
                  },
                  "detail": {
                    "type": "string",
                    "description": "Detailed information about the log entry"
                  },
                  "storedIn": {
                    "type": "string",
                    "enum": [
                      "KV",
                      "D1"
                    ],
                    "description": "Storage location indicator (KV store or D1 database)"
                  },
                  "filters": {
                    "type": "object",
                    "description": "Filter criteria for retrieve operations"
                  }
                },
                "required": [
                  "operation"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Advanced logging operation results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "operation": {
                      "type": "string",
                      "description": "Operation type executed"
                    },
                    "result": {
                      "type": "object",
                      "description": "Operation-specific results"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Operation timestamp"
                    },
                    "message": {
                      "type": "string",
                      "description": "Operation status message"
                    }
                  },
                  "required": [
                    "success",
                    "operation"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "consequential": true
      },
      {
        "operationId": "retrieveRecentSessionLogs",
        "path": "/api/session-init",
        "method": "GET",
        "summary": "Initialize conversation with recent context",
        "description": "Called AUTOMATICALLY at conversation start to gather recent context and maintain conversation continuity. Provides session history for context.",
        "responses": {
          "200": {
            "description": "Recent session context and conversation history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "recent_logs": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Recent conversation events"
                    },
                    "session_summary": {
                      "type": "string",
                      "description": "Summary of recent activity"
                    },
                    "context_flags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Important context indicators"
                    },
                    "total_entries": {
                      "type": "integer"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "recent_logs",
                    "total_entries"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of recent entries to retrieve (1-200). Default 7 provides good context without overwhelming.",
            "schema": {
              "type": "integer",
              "default": 7,
              "maximum": 200
            },
            "example": 10
          }
        ],
        "autonomous": true
      },
      {
        "operationId": "searchLogs",
        "path": "/api/search/logs",
        "method": "POST",
        "summary": "Search logs using vector similarity",
        "description": "Called when vector similarity search is needed to find contextually similar logs and insights. Essential for pattern recognition and knowledge retrieval.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Search query text for vector similarity matching"
                  },
                  "limit": {
                    "type": "integer",
                    "default": 5,
                    "maximum": 20,
                    "description": "Maximum number of results to return"
                  }
                },
                "required": [
                  "query"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vector search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "query": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true
      },
      {
        "operationId": "searchR2Storage",
        "path": "/api/search/r2",
        "method": "POST",
        "summary": "Search R2 storage objects",
        "description": "Called when searching stored content in R2 bucket by metadata and content patterns. Useful for finding specific stored artifacts and insights across the storage system.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Search query for R2 stored content and metadata"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "all",
                      "resonance",
                      "logbin"
                    ],
                    "default": "all",
                    "description": "Type of R2 content to search (all, resonance threads, or logbin data)"
                  },
                  "limit": {
                    "type": "integer",
                    "default": 5,
                    "maximum": 20,
                    "description": "Maximum number of objects to return"
                  }
                },
                "required": [
                  "query"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "R2 search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "objects": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "query": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true
      },
      {
        "operationId": "ragSearch",
        "path": "/api/rag/search",
        "method": "POST",
        "summary": "RAG semantic search with AI generation",
        "description": "Called AUTOMATICALLY for retrieval-augmented generation search combining vector similarity with AI synthesis. Triggers on: 'analyze my patterns', 'find insights', 'what have I learned', 'synthesize knowledge', deep analysis needs.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Query text for retrieval-augmented generation search"
                  },
                  "limit": {
                    "type": "integer",
                    "default": 5,
                    "maximum": 10,
                    "description": "Maximum number of retrieved items for generation"
                  },
                  "includeGeneration": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to include AI-generated insights with retrieval results"
                  }
                },
                "required": [
                  "query"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RAG search with generated insights",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "retrieved": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "generated": {
                      "type": "string"
                    },
                    "query": {
                      "type": "string"
                    },
                    "relevance_scores": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true
      },
      {
        "operationId": "getConversationAnalytics",
        "path": "/api/analytics/insights",
        "method": "GET",
        "summary": "Get conversation analytics and insights",
        "description": "Called automatically to analyze conversation patterns and provide usage insights. Essential for understanding user engagement and behavioral trends over time.",
        "responses": {
          "200": {
            "description": "Conversation analytics and patterns",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversation_patterns": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Identified conversation patterns"
                    },
                    "growth_indicators": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Signs of personal growth"
                    },
                    "engagement_metrics": {
                      "type": "object",
                      "description": "Engagement and usage metrics"
                    },
                    "insights_summary": {
                      "type": "string",
                      "description": "Key insights summary"
                    },
                    "recommendations": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Personalized recommendations"
                    }
                  },
                  "required": [
                    "conversation_patterns",
                    "insights_summary"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "Analysis timeframe (day, week, month)",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month"
              ],
              "default": "week"
            }
          }
        ],
        "autonomous": true
      },
      {
        "operationId": "exportConversationData",
        "path": "/api/export/conversation",
        "method": "POST",
        "summary": "Export conversation data",
        "description": "Called when conversation history export is needed in various formats for backup or analysis. Supports JSON, CSV, and PDF formats for comprehensive data management.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "enum": [
                      "json",
                      "csv",
                      "pdf"
                    ],
                    "default": "json",
                    "description": "Export format"
                  },
                  "date_range": {
                    "type": "object",
                    "description": "Date range for export"
                  },
                  "include_analytics": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include analytics data"
                  }
                },
                "required": [
                  "format"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Exported conversation data with download link",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "export_url": {
                      "type": "string",
                      "description": "Download URL for export file"
                    },
                    "file_size": {
                      "type": "string",
                      "description": "File size in human readable format"
                    },
                    "record_count": {
                      "type": "integer",
                      "description": "Number of records exported"
                    },
                    "export_id": {
                      "type": "string",
                      "description": "Unique export identifier"
                    }
                  },
                  "required": [
                    "export_url",
                    "record_count",
                    "export_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "consequential": true
      },
      {
        "operationId": "retrieveR2StoredContent",
        "path": "/api/r2/list",
        "method": "GET",
        "summary": "List stored content from R2",
        "description": "Called when browsing stored logs and artifacts from R2 storage is needed. Provides metadata and content listing for efficient content management and retrieval.",
        "responses": {
          "200": {
            "description": "List of stored items with metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "size": {
                            "type": "integer"
                          },
                          "uploaded": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "key"
                        ]
                      }
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of items"
                    },
                    "prefix": {
                      "type": "string",
                      "description": "Prefix filter used"
                    }
                  },
                  "required": [
                    "items",
                    "total"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "prefix",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 50
            }
          }
        ],
        "autonomous": true
      },
      {
        "operationId": "getR2StoredContent",
        "path": "/api/r2/get",
        "method": "GET",
        "summary": "Retrieve specific content from R2",
        "description": "Called when specific stored content retrieval from R2 is needed by key. Essential for accessing individual insights, artifacts, and stored data with metadata.",
        "responses": {
          "200": {
            "description": "Retrieved content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "uploaded": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "content"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "autonomous": true
      },
      {
        "operationId": "retrieveFromKV",
        "path": "/api/kv/get",
        "method": "GET",
        "summary": "Retrieve data from KV storage",
        "description": "Called AUTOMATICALLY for direct KV retrieval when fast key-value data access is needed. Triggers on: 'get my data', 'retrieve settings', 'load preferences', cached data access needs.",
        "responses": {
          "200": {
            "description": "KV retrieval result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "object"
                    },
                    "metadata": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "value"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "autonomous": true
      },
      {
        "operationId": "upsertVectors",
        "path": "/api/vectorize/upsert",
        "method": "POST",
        "summary": "Upsert vectors into the vector index",
        "description": "Called to store vector embeddings in the vector index. Accepts either text (for auto-embedding) or pre-generated 1024-dimensional vectors.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier for the vector entry"
                  },
                  "text": {
                    "type": "string",
                    "description": "Text to embed as vector (alternative to providing vector directly)"
                  },
                  "vector": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "minItems": 1024,
                    "maxItems": 1024,
                    "description": "Pre-generated 1024-dimensional vector (alternative to providing text)"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Optional metadata to store with the vector"
                  }
                },
                "required": [
                  "id"
                ],
                "oneOf": [
                  {
                    "required": [
                      "text"
                    ]
                  },
                  {
                    "required": [
                      "vector"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vector upsert successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    },
                    "inserted": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "success",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or vector dimensions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true
      },
      {
        "operationId": "queryVectorIndex",
        "path": "/api/vectorize/query",
        "method": "POST",
        "summary": "Query vector index for similarity search",
        "description": "Called when vector index semantic search is needed for finding semantically similar content. Provides similarity scores and relevance matching for knowledge discovery.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Text to embed and search for (alternative to providing vector directly)"
                  },
                  "vector": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "minItems": 1024,
                    "maxItems": 1024,
                    "description": "Query vector for similarity search (1024-dimensional array, alternative to providing text)"
                  },
                  "topK": {
                    "type": "integer",
                    "default": 5,
                    "maximum": 20,
                    "description": "Number of most similar vectors to return"
                  },
                  "returnMetadata": {
                    "type": "string",
                    "enum": [
                      "all",
                      "none"
                    ],
                    "default": "all",
                    "description": "Whether to return metadata with results"
                  },
                  "returnValues": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to return vector values with results"
                  }
                },
                "oneOf": [
                  {
                    "required": [
                      "text"
                    ]
                  },
                  {
                    "required": [
                      "vector"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vector search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "matches": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "score": {
                            "type": "number"
                          },
                          "metadata": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "id",
                          "score"
                        ]
                      }
                    },
                    "count": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "matches",
                    "count"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "parameters": [],
        "autonomous": true
      }
    ],
    "paths": {},
    "operationIds": {}
  },
  "backend": {
    "endpoints": [
      {
        "method": "POST",
        "path": "/api/insight",
        "lineNumber": 832,
        "operationId": "generateJournalInsight",
        "context": "============================================\n// INSIGHT GENERATION ENDPOINT\n// =============================================================================\n\n// Generate insights from journal entries\nrouter.post(\"/api/insight\", async (req, env) => {\n  try {\n    const body = await req.json();\n    \n    // Extract current entry from request body\n    const currentEntry = body.currentEntry || body.entry || body;\n    \n    // Retrieve user's history using journal service\n    const historyResult = await"
      },
      {
        "method": "POST",
        "path": "/api/ark/log",
        "lineNumber": 878,
        "operationId": null,
        "context": "========================================================\n// ARK ENDPOINTS (CONSOLIDATED)\n// =============================================================================\n\n// ARK logging and retrieval\nrouter.post(\"/api/ark/log\", async (req, env) => {\n  const result = await arkLog(req, env);\n  return addCORS(result);\n});\n\nrouter.get(\"/api/ark/retrieve\", async (req, env) => {\n  const result = await arkRetrieve(req, env);\n  return addCORS(result);\n});\n\nrouter.get(\"/api/ark/memories\", async (req, env"
      },
      {
        "method": "GET",
        "path": "/api/ark/retrieve",
        "lineNumber": 883,
        "operationId": null,
        "context": "===============================================\n\n// ARK logging and retrieval\nrouter.post(\"/api/ark/log\", async (req, env) => {\n  const result = await arkLog(req, env);\n  return addCORS(result);\n});\n\nrouter.get(\"/api/ark/retrieve\", async (req, env) => {\n  const result = await arkRetrieve(req, env);\n  return addCORS(result);\n});\n\nrouter.get(\"/api/ark/memories\", async (req, env) => {\n  const result = await arkMemories(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/vector\", async ("
      },
      {
        "method": "GET",
        "path": "/api/ark/memories",
        "lineNumber": 888,
        "operationId": null,
        "context": "onst result = await arkLog(req, env);\n  return addCORS(result);\n});\n\nrouter.get(\"/api/ark/retrieve\", async (req, env) => {\n  const result = await arkRetrieve(req, env);\n  return addCORS(result);\n});\n\nrouter.get(\"/api/ark/memories\", async (req, env) => {\n  const result = await arkMemories(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/vector\", async (req, env) => {\n  const result = await arkVector(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/resonance\", async ("
      },
      {
        "method": "POST",
        "path": "/api/ark/vector",
        "lineNumber": 893,
        "operationId": null,
        "context": "result = await arkRetrieve(req, env);\n  return addCORS(result);\n});\n\nrouter.get(\"/api/ark/memories\", async (req, env) => {\n  const result = await arkMemories(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/vector\", async (req, env) => {\n  const result = await arkVector(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/resonance\", async (req, env) => {\n  const result = await arkResonance(req, env);\n  return addCORS(result);\n});\n\nrouter.get(\"/api/ark/status\", async (r"
      },
      {
        "method": "POST",
        "path": "/api/ark/resonance",
        "lineNumber": 898,
        "operationId": null,
        "context": "st result = await arkMemories(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/vector\", async (req, env) => {\n  const result = await arkVector(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/resonance\", async (req, env) => {\n  const result = await arkResonance(req, env);\n  return addCORS(result);\n});\n\nrouter.get(\"/api/ark/status\", async (req, env) => {\n  const result = await arkStatus(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/filter\", async (r"
      },
      {
        "method": "GET",
        "path": "/api/ark/status",
        "lineNumber": 903,
        "operationId": null,
        "context": "esult = await arkVector(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/resonance\", async (req, env) => {\n  const result = await arkResonance(req, env);\n  return addCORS(result);\n});\n\nrouter.get(\"/api/ark/status\", async (req, env) => {\n  const result = await arkStatus(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/filter\", async (req, env) => {\n  const result = await arkFilter(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/autonomous\", async (req"
      },
      {
        "method": "POST",
        "path": "/api/ark/filter",
        "lineNumber": 908,
        "operationId": null,
        "context": "st result = await arkResonance(req, env);\n  return addCORS(result);\n});\n\nrouter.get(\"/api/ark/status\", async (req, env) => {\n  const result = await arkStatus(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/filter\", async (req, env) => {\n  const result = await arkFilter(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/autonomous\", async (req, env) => {\n  const result = await arkAutonomous(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/test-ai\", asyn"
      },
      {
        "method": "POST",
        "path": "/api/ark/autonomous",
        "lineNumber": 913,
        "operationId": null,
        "context": "onst result = await arkStatus(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/filter\", async (req, env) => {\n  const result = await arkFilter(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/autonomous\", async (req, env) => {\n  const result = await arkAutonomous(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/test-ai\", async (req, env) => {\n  const result = await arkTestAI(env, req);\n  return addCORS(result);\n});\n\n// ================================"
      },
      {
        "method": "POST",
        "path": "/api/ark/test-ai",
        "lineNumber": 918,
        "operationId": null,
        "context": "ult = await arkFilter(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/autonomous\", async (req, env) => {\n  const result = await arkAutonomous(req, env);\n  return addCORS(result);\n});\n\nrouter.post(\"/api/ark/test-ai\", async (req, env) => {\n  const result = await arkTestAI(env, req);\n  return addCORS(result);\n});\n\n// =============================================================================\n// ADDITIONAL ROUTER MOUNTS FOR COMPLETE SCHEMA COVERAGE\n// =============================="
      },
      {
        "method": "GET",
        "path": "/api/analytics/insights",
        "lineNumber": 953,
        "operationId": "getConversationAnalytics",
        "context": "on endpoints (POST handlers)\n\n// FALLBACK AND ERROR HANDLING\n// =============================================================================\n\n// Catch-all for unmatched routes\n\n// Analytics insights\nrouter.get(\"/api/analytics/insights\", async (req, env) => {\n  try {\n    const url = new URL(req.url);\n    const days = parseInt(url.searchParams.get('days') || '30');\n    const type = url.searchParams.get('type') || 'all';\n    \n    const result = {\n      insights: [],\n      patterns: [],\n      recom"
      },
      {
        "method": "POST",
        "path": "/api/export/conversation",
        "lineNumber": 977,
        "operationId": "getConversationAnalytics",
        "context": "tch (error) {\n    await logChatGPTAction(env, 'getConversationAnalytics', {}, null, error);\n    return addCORS(createErrorResponse({ error: error.message }, 500));\n  }\n});\n// Export conversation data\nrouter.post(\"/api/export/conversation\", async (req, env) => {\n  try {\n    const body = await req.json();\n    const format = body.format || 'json';\n    const timeframe = body.timeframe || '30d';\n    \n    const result = {\n      export_id: crypto.randomUUID(),\n      format,\n      timeframe,\n      statu"
      }
    ],
    "paths": {},
    "operationPatterns": {}
  },
  "misalignments": {
    "missingInBackend": [
      {
        "operationId": "manageCommitment",
        "path": "/api/commitments/create",
        "method": "POST"
      },
      {
        "operationId": "listActiveCommitments",
        "path": "/api/commitments/active",
        "method": "GET"
      },
      {
        "operationId": "queryD1Database",
        "path": "/api/d1/query",
        "method": "POST"
      },
      {
        "operationId": "storeInKV",
        "path": "/api/kv/log",
        "method": "POST"
      },
      {
        "operationId": "upsertVectors",
        "path": "/api/vectorize/upsert",
        "method": "POST"
      },
      {
        "operationId": "trustCheckIn",
        "path": "/api/trust/check-in",
        "method": "POST"
      },
      {
        "operationId": "somaticHealingSession",
        "path": "/api/somatic/session",
        "method": "POST"
      },
      {
        "operationId": "extractMediaWisdom",
        "path": "/api/media/extract-wisdom",
        "method": "POST"
      },
      {
        "operationId": "recognizePatterns",
        "path": "/api/patterns/recognize",
        "method": "POST"
      },
      {
        "operationId": "standingTallPractice",
        "path": "/api/standing-tall/practice",
        "method": "POST"
      },
      {
        "operationId": "synthesizeWisdom",
        "path": "/api/wisdom/synthesize",
        "method": "POST"
      },
      {
        "operationId": "getDailySynthesis",
        "path": "/api/wisdom/daily-synthesis",
        "method": "GET"
      },
      {
        "operationId": "getPersonalInsights",
        "path": "/api/insights",
        "method": "GET"
      },
      {
        "operationId": "submitFeedback",
        "path": "/api/feedback",
        "method": "POST"
      },
      {
        "operationId": "generateDiscoveryInquiry",
        "path": "/api/discovery/generate-inquiry",
        "method": "POST"
      },
      {
        "operationId": "interpretDream",
        "path": "/api/dreams/interpret",
        "method": "POST"
      },
      {
        "operationId": "optimizeEnergy",
        "path": "/api/energy/optimize",
        "method": "POST"
      },
      {
        "operationId": "clarifyValues",
        "path": "/api/values/clarify",
        "method": "POST"
      },
      {
        "operationId": "unleashCreativity",
        "path": "/api/creativity/unleash",
        "method": "POST"
      },
      {
        "operationId": "cultivateAbundance",
        "path": "/api/abundance/cultivate",
        "method": "POST"
      },
      {
        "operationId": "navigateTransitions",
        "path": "/api/transitions/navigate",
        "method": "POST"
      },
      {
        "operationId": "healAncestry",
        "path": "/api/ancestry/heal",
        "method": "POST"
      },
      {
        "operationId": "ragMemoryConsolidation",
        "path": "/api/rag/memory",
        "method": "POST"
      },
      {
        "operationId": "trackMoodAndEmotions",
        "path": "/api/mood/track",
        "method": "POST"
      },
      {
        "operationId": "setPersonalGoals",
        "path": "/api/goals/set",
        "method": "POST"
      },
      {
        "operationId": "designHabits",
        "path": "/api/habits/design",
        "method": "POST"
      },
      {
        "operationId": "systemHealthCheck",
        "path": "/api/system/health-check",
        "method": "GET"
      },
      {
        "operationId": "logDataOrEvent",
        "path": "/api/log",
        "method": "POST"
      },
      {
        "operationId": "retrieveLogsOrDataEntries",
        "path": "/api/logs",
        "method": "GET"
      },
      {
        "operationId": "logDataOrEvent",
        "path": "/api/log",
        "method": "POST"
      },
      {
        "operationId": "retrieveLogsOrDataEntries",
        "path": "/api/logs",
        "method": "GET"
      },
      {
        "operationId": "advancedLoggingOperations",
        "path": "/api/logs",
        "method": "POST"
      },
      {
        "operationId": "retrieveRecentSessionLogs",
        "path": "/api/session-init",
        "method": "GET"
      },
      {
        "operationId": "searchLogs",
        "path": "/api/search/logs",
        "method": "POST"
      },
      {
        "operationId": "searchR2Storage",
        "path": "/api/search/r2",
        "method": "POST"
      },
      {
        "operationId": "ragSearch",
        "path": "/api/rag/search",
        "method": "POST"
      },
      {
        "operationId": "retrieveR2StoredContent",
        "path": "/api/r2/list",
        "method": "GET"
      },
      {
        "operationId": "getR2StoredContent",
        "path": "/api/r2/get",
        "method": "GET"
      },
      {
        "operationId": "retrieveFromKV",
        "path": "/api/kv/get",
        "method": "GET"
      },
      {
        "operationId": "upsertVectors",
        "path": "/api/vectorize/upsert",
        "method": "POST"
      },
      {
        "operationId": "queryVectorIndex",
        "path": "/api/vectorize/query",
        "method": "POST"
      }
    ],
    "missingInSchema": [
      {
        "path": "/api/ark/log",
        "method": "POST",
        "operationId": null
      },
      {
        "path": "/api/ark/retrieve",
        "method": "GET",
        "operationId": null
      },
      {
        "path": "/api/ark/memories",
        "method": "GET",
        "operationId": null
      },
      {
        "path": "/api/ark/vector",
        "method": "POST",
        "operationId": null
      },
      {
        "path": "/api/ark/resonance",
        "method": "POST",
        "operationId": null
      },
      {
        "path": "/api/ark/status",
        "method": "GET",
        "operationId": null
      },
      {
        "path": "/api/ark/filter",
        "method": "POST",
        "operationId": null
      },
      {
        "path": "/api/ark/autonomous",
        "method": "POST",
        "operationId": null
      },
      {
        "path": "/api/ark/test-ai",
        "method": "POST",
        "operationId": null
      }
    ],
    "pathMismatches": [],
    "parameterMismatches": [
      {
        "schemaOperationId": "exportConversationData",
        "backendOperationId": "getConversationAnalytics",
        "path": "/api/export/conversation",
        "method": "POST"
      }
    ],
    "responseMismatches": [],
    "errorHandlingMismatches": [
      {
        "issue": "Mismatched try/catch blocks",
        "tryCount": 16,
        "catchCount": 13,
        "difference": 3
      }
    ]
  }
}