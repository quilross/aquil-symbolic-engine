{
  "openapi": "3.1.0",
  "info": {
    "title": "Aquil Logging & Retrieval API",
    "description": "Primary actions schema for all logging, retrieval, and search operations across D1, KV, R2, and Vectorize storage systems.",
    "version": "1.1.0"
  },
  "servers": [
    {
      "url": "https://logging.signal-q.me",
      "description": "Aquil's logging and retrieval subdomain (Production)"
    }
  ],
  "paths": {
    "/api/log": {
      "post": {
        "summary": "Log any data or conversation event",
        "description": "Called AUTOMATICALLY for logging chat messages, insights, breakthroughs, emotional moments, or any meaningful conversation moment. Essential for continuity and pattern recognition.",
        "operationId": "logDataOrEvent",
        "x-openai-isConsequential": true,
        "x-openai-autonomous": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "chat_message",
                    "description": "Event type (chat_message, insight, breakthrough, emotion, etc.)"
                  },
                  "who": {
                    "type": "string",
                    "default": "user",
                    "description": "Who generated this event (user, assistant, system)"
                  },
                  "level": {
                    "type": "string",
                    "default": "info",
                    "description": "Importance level (debug, info, significant, breakthrough)"
                  },
                  "payload": {
                    "type": "object",
                    "description": "Event data and context"
                  }
                },
                "required": [
                  "payload"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Log stored successfully with metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logged": {
                      "type": "boolean"
                    },
                    "log_id": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "storage_location": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "logged",
                    "log_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid log data or parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Logging operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/logs": {
      "get": {
        "summary": "Retrieve conversation history and context",
        "description": "Called AUTOMATICALLY to gather conversation history and context for continuity. Essential for understanding user's journey and maintaining conversation flow.",
        "operationId": "retrieveLogsOrDataEntries",
        "x-openai-autonomous": true,
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of entries to retrieve (1-200). Higher numbers provide more context but may slow response.",
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 200
            },
            "example": 50
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation history with context metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Conversation log entries"
                    },
                    "context_summary": {
                      "type": "string",
                      "description": "Overall conversation context"
                    },
                    "key_themes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Major conversation themes"
                    },
                    "total_entries": {
                      "type": "integer"
                    },
                    "time_span": {
                      "type": "string",
                      "description": "Time period covered"
                    }
                  },
                  "required": [
                    "logs",
                    "total_entries"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Advanced logging operations (KV, D1, promotion)",
        "description": "Called for advanced logging operations including storage control and data promotion between KV and D1 systems. Handles complex logging workflows when standard logging needs enhancement.",
        "operationId": "advancedLoggingOperations",
        "x-openai-isConsequential": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operation": {
                    "type": "string",
                    "enum": [
                      "kv-write",
                      "d1-insert",
                      "promote",
                      "retrieve",
                      "latest",
                      "retrieval-meta"
                    ],
                    "description": "Type of logging operation to perform"
                  },
                  "payload": {
                    "type": "object",
                    "description": "Operation-specific data and parameters"
                  },
                  "id": {
                    "type": "string",
                    "description": "Unique identifier for the log entry or operation"
                  },
                  "type": {
                    "type": "string",
                    "description": "Log entry type or category"
                  },
                  "detail": {
                    "type": "string",
                    "description": "Detailed information about the log entry"
                  },
                  "storedIn": {
                    "type": "string",
                    "enum": [
                      "KV",
                      "D1"
                    ],
                    "description": "Storage location indicator (KV store or D1 database)"
                  },
                  "filters": {
                    "type": "object",
                    "description": "Filter criteria for retrieve operations"
                  }
                },
                "required": [
                  "operation"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Advanced logging operation results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Operation success status"
                    },
                    "operation": {
                      "type": "string",
                      "description": "Operation type executed"
                    },
                    "result": {
                      "type": "object",
                      "description": "Operation-specific results"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Operation timestamp"
                    },
                    "message": {
                      "type": "string",
                      "description": "Operation status message"
                    }
                  },
                  "required": [
                    "success",
                    "operation"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/session-init": {
      "get": {
        "summary": "Initialize conversation with recent context",
        "description": "Called AUTOMATICALLY at conversation start to gather recent context and maintain conversation continuity. Provides session history for context.",
        "operationId": "retrieveRecentSessionLogs",
        "x-openai-autonomous": true,
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of recent entries to retrieve (1-200). Default 7 provides good context without overwhelming.",
            "schema": {
              "type": "integer",
              "default": 7,
              "maximum": 200
            },
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Recent session context and conversation history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "recent_logs": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Recent conversation events"
                    },
                    "session_summary": {
                      "type": "string",
                      "description": "Summary of recent activity"
                    },
                    "context_flags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Important context indicators"
                    },
                    "total_entries": {
                      "type": "integer"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "recent_logs",
                    "total_entries"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/search/logs": {
      "post": {
        "summary": "Search logs using vector similarity",
        "description": "Called when vector similarity search is needed to find contextually similar logs and insights. Essential for pattern recognition and knowledge retrieval.",
        "operationId": "searchLogs",
        "x-openai-autonomous": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Search query text for vector similarity matching"
                  },
                  "limit": {
                    "type": "integer",
                    "default": 5,
                    "maximum": 20,
                    "description": "Maximum number of results to return"
                  }
                },
                "required": [
                  "query"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vector search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "query": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/search/r2": {
      "post": {
        "summary": "Search R2 storage objects",
        "description": "Called when searching stored content in R2 bucket by metadata and content patterns. Useful for finding specific stored artifacts and insights across the storage system.",
        "operationId": "searchR2Storage",
        "x-openai-autonomous": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Search query for R2 stored content and metadata"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "all",
                      "resonance",
                      "logbin"
                    ],
                    "default": "all",
                    "description": "Type of R2 content to search (all, resonance threads, or logbin data)"
                  },
                  "limit": {
                    "type": "integer",
                    "default": 5,
                    "maximum": 20,
                    "description": "Maximum number of objects to return"
                  }
                },
                "required": [
                  "query"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "R2 search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "objects": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "query": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/rag/search": {
      "post": {
        "summary": "RAG semantic search with AI generation",
        "description": "Called AUTOMATICALLY for retrieval-augmented generation search combining vector similarity with AI synthesis. Triggers on: 'analyze my patterns', 'find insights', 'what have I learned', 'synthesize knowledge', deep analysis needs.",
        "operationId": "ragSearch",
        "x-openai-autonomous": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Query text for retrieval-augmented generation search"
                  },
                  "limit": {
                    "type": "integer",
                    "default": 5,
                    "maximum": 10,
                    "description": "Maximum number of retrieved items for generation"
                  },
                  "includeGeneration": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to include AI-generated insights with retrieval results"
                  }
                },
                "required": [
                  "query"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RAG search with generated insights",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "retrieved": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "generated": {
                      "type": "string"
                    },
                    "query": {
                      "type": "string"
                    },
                    "relevance_scores": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/analytics/insights": {
      "get": {
        "summary": "Get conversation analytics and insights",
        "description": "Called automatically to analyze conversation patterns and provide usage insights. Essential for understanding user engagement and behavioral trends over time.",
        "operationId": "getConversationAnalytics",
        "x-openai-autonomous": true,
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "Analysis timeframe (day, week, month)",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month"
              ],
              "default": "week"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation analytics and patterns",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversation_patterns": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Identified conversation patterns"
                    },
                    "growth_indicators": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Signs of personal growth"
                    },
                    "engagement_metrics": {
                      "type": "object",
                      "description": "Engagement and usage metrics"
                    },
                    "insights_summary": {
                      "type": "string",
                      "description": "Key insights summary"
                    },
                    "recommendations": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Personalized recommendations"
                    }
                  },
                  "required": [
                    "conversation_patterns",
                    "insights_summary"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/export/conversation": {
      "post": {
        "summary": "Export conversation data",
        "description": "Called when conversation history export is needed in various formats for backup or analysis. Supports JSON, CSV, and PDF formats for comprehensive data management.",
        "operationId": "exportConversationData",
        "x-openai-isConsequential": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "enum": [
                      "json",
                      "csv",
                      "pdf"
                    ],
                    "default": "json",
                    "description": "Export format"
                  },
                  "date_range": {
                    "type": "object",
                    "description": "Date range for export"
                  },
                  "include_analytics": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include analytics data"
                  }
                },
                "required": [
                  "format"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Exported conversation data with download link",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "export_url": {
                      "type": "string",
                      "description": "Download URL for export file"
                    },
                    "file_size": {
                      "type": "string",
                      "description": "File size in human readable format"
                    },
                    "record_count": {
                      "type": "integer",
                      "description": "Number of records exported"
                    },
                    "export_id": {
                      "type": "string",
                      "description": "Unique export identifier"
                    }
                  },
                  "required": [
                    "export_url",
                    "record_count",
                    "export_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/r2/list": {
      "get": {
        "summary": "List stored content from R2",
        "description": "Called when browsing stored logs and artifacts from R2 storage is needed. Provides metadata and content listing for efficient content management and retrieval.",
        "operationId": "retrieveR2StoredContent",
        "x-openai-autonomous": true,
        "parameters": [
          {
            "name": "prefix",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of stored items with metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "size": {
                            "type": "integer"
                          },
                          "uploaded": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "key"
                        ]
                      }
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of items"
                    },
                    "prefix": {
                      "type": "string",
                      "description": "Prefix filter used"
                    }
                  },
                  "required": [
                    "items",
                    "total"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/r2/get": {
      "get": {
        "summary": "Retrieve specific content from R2",
        "description": "Called when specific stored content retrieval from R2 is needed by key. Essential for accessing individual insights, artifacts, and stored data with metadata.",
        "operationId": "getR2StoredContent",
        "x-openai-autonomous": true,
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "uploaded": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "content"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/kv/get": {
      "get": {
        "summary": "Retrieve data from KV storage",
        "description": "Called AUTOMATICALLY for direct KV retrieval when fast key-value data access is needed. Triggers on: 'get my data', 'retrieve settings', 'load preferences', cached data access needs.",
        "operationId": "retrieveFromKV",
        "x-openai-autonomous": true,
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "KV retrieval result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "object"
                    },
                    "metadata": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "value"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/vectorize/upsert": {
      "post": {
        "summary": "Upsert vectors into the vector index",
        "description": "Called to store vector embeddings in the vector index. Accepts either text (for auto-embedding) or pre-generated 1024-dimensional vectors.",
        "operationId": "upsertVectors",
        "x-openai-autonomous": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier for the vector entry"
                  },
                  "text": {
                    "type": "string",
                    "description": "Text to embed as vector (alternative to providing vector directly)"
                  },
                  "vector": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "minItems": 1024,
                    "maxItems": 1024,
                    "description": "Pre-generated 1024-dimensional vector (alternative to providing text)"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Optional metadata to store with the vector"
                  }
                },
                "required": [
                  "id"
                ],
                "oneOf": [
                  {
                    "required": ["text"]
                  },
                  {
                    "required": ["vector"]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vector upsert successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    },
                    "inserted": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "success",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or vector dimensions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "TypeScript",
            "label": "Programmatically generate 1024-d vector",
            "source": "const values = Array.from({ length: 1024 }, (_, i) => parseFloat((i * 0.001).toFixed(6)));\n\nawait signal_q_me__jit_plugin.upsertVectors({\n  vectors: [\n    {\n      id: \"ark_vector_patch_final\",\n      values,\n      namespace: \"ark.vector.tests\"\n    }\n  ]\n});"
          }
        ]
      }
    },
    "/api/vectorize/query": {
      "post": {
        "summary": "Query vector index for similarity search",
        "description": "Called when vector index semantic search is needed for finding semantically similar content. Provides similarity scores and relevance matching for knowledge discovery.",
        "operationId": "queryVectorIndex",
        "x-openai-autonomous": true,
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Text to embed and search for (alternative to providing vector directly)"
                  },
                  "vector": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "minItems": 1024,
                    "maxItems": 1024,
                    "description": "Query vector for similarity search (1024-dimensional array, alternative to providing text)"
                  },
                  "topK": {
                    "type": "integer",
                    "default": 5,
                    "maximum": 20,
                    "description": "Number of most similar vectors to return"
                  },
                  "returnMetadata": {
                    "type": "string",
                    "enum": ["all", "none"],
                    "default": "all",
                    "description": "Whether to return metadata with results"
                  },
                  "returnValues": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to return vector values with results"
                  }
                },
                "oneOf": [
                  {
                    "required": ["text"]
                  },
                  {
                    "required": ["vector"]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vector search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "matches": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "score": {
                            "type": "number"
                          },
                          "metadata": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "id",
                          "score"
                        ]
                      }
                    },
                    "count": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "matches",
                    "count"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or request format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "details": {
                      "type": "object",
                      "description": "Additional error details"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable error message"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Error timestamp"
                    }
                  },
                  "required": [
                    "error",
                    "message"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LogEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string"
          },
          "who": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "payload": {
            "type": "object"
          },
          "storedIn": {
            "type": "string",
            "enum": [
              "KV",
              "D1"
            ]
          }
        }
      },
      "SearchResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "relevance_score": {
            "type": "number"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  },
  "x-ark-metadata": {
    "stores": {
      "kv": "AQUIL_MEMORIES",
      "d1": "AQUIL_DB"
    },
    "routes": {
      "kvWrite": "/api/logs/kv-write",
      "d1Insert": "/api/logs/d1-insert",
      "promote": "/api/logs/promote",
      "retrieve": "/api/logs/retrieve",
      "retrieveLatest": "/api/logs/latest",
      "retrievalMeta": "/api/logs/retrieval-meta"
    },
    "enums": {
      "logTypes": [
        "session",
        "voice-change",
        "insight",
        "breakthrough",
        "commitment",
        "api-failure",
        "session-end"
      ],
      "storedIn": [
        "KV",
        "D1"
      ]
    },
    "validation": {
      "uuidV4": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$",
      "maxDetailLength": 4000,
      "timestampFormat": "iso8601"
    },
    "guards": {
      "kvFirst": true,
      "promotionRule": "Promote to D1 when type is breakthrough|commitment|api-failure or log repeats > 2 in 24h."
    }
  }
}
