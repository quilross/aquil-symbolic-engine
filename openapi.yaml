openapi: 3.0.3
info:
  title: Aquil Symbolic Engine API
  version: 1.0.0
  description: Comprehensive API schema for all endpoints in the Aquil Symbolic Engine.
paths:
  /api/session-init:
    get:
      summary: Session initialization with continuity and AI-crafted opening
      responses:
        '200':
          description: Session initialized
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id: { type: string }
                  continuity: { type: array, items: { type: object } }
                  opening: { type: string }
                  voice: { type: string }
                  timestamp: { type: string }
  /api/discovery/generate-inquiry:
    post:
      summary: Generate Socratic questions using AI and log inquiry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                context: { type: object }
                session_id: { type: string }
      responses:
        '200':
          description: Inquiry generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  inquiry: { type: string }
                  voice_used: { type: string }
  /api/ritual/auto-suggest:
    post:
      summary: Suggest rituals using AI and log suggestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                context: { type: object }
                session_id: { type: string }
      responses:
        '200':
          description: Ritual suggestion
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestion: { type: object }
  /api/system/health-check:
    get:
      summary: Perform health checks and log results
      responses:
        '200':
          description: Health check result
          content:
            application/json:
              schema:
                type: object
  /api/logs:
    get:
      summary: Retrieve conversation history and context
      parameters:
        - name: limit
          in: query
          schema: { type: integer }
        - name: type
          in: query
          schema: { type: string }
        - name: who
          in: query
          schema: { type: string }
        - name: level
          in: query
          schema: { type: string }
        - name: session_id
          in: query
          schema: { type: string }
        - name: tag
          in: query
          schema: { type: string }
      responses:
        '200':
          description: Logs retrieved
          content:
            application/json:
              schema:
                type: array
                items: { type: object }
  /api/log:
    post:
      summary: General logging endpoint for events and feedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type: { type: string }
                payload: { type: object }
                session_id: { type: string }
                who: { type: string }
                level: { type: string }
                tags: { type: array, items: { type: string } }
                text: { type: string }
                vector: { type: array, items: { type: number } }
                binary: { type: string }
      responses:
        '200':
          description: Log written
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  id: { type: string }
  /api/trust/check-in:
    post:
      summary: Trust check-in session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_state: { type: string }
                trust_level: { type: integer }
                specific_situation: { type: string }
                body_sensations: { type: string }
      responses:
        '200':
          description: Trust check-in result
          content:
            application/json:
              schema:
                type: object
  /api/media/extract-wisdom:
    post:
      summary: Media wisdom extraction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                media_type: { type: string }
                title: { type: string }
                your_reaction: { type: string }
                content_summary: { type: string }
      responses:
        '200':
          description: Wisdom extraction result
          content:
            application/json:
              schema:
                type: object
  /api/patterns/recognize:
    post:
      summary: Pattern recognition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                area_of_focus: { type: string }
                recent_experiences: { type: string }
      responses:
        '200':
          description: Pattern recognition result
          content:
            application/json:
              schema:
                type: object
  /api/standing-tall/practice:
    post:
      summary: Standing tall practice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                situation: { type: string }
                fears_concerns: { type: string }
                desired_outcome: { type: string }
                past_successes: { type: string }
      responses:
        '200':
          description: Practice result
          content:
            application/json:
              schema:
                type: object
  /api/values/clarify:
    post:
      summary: Values clarification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                values_list: { type: array, items: { type: string } }
      responses:
        '200':
          description: Values clarified
          content:
            application/json:
              schema:
                type: object
  /api/creativity/unleash:
    post:
      summary: Creativity unleashing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                block_description: { type: string }
      responses:
        '200':
          description: Creativity unleashed
          content:
            application/json:
              schema:
                type: object
  /api/abundance/cultivate:
    post:
      summary: Abundance cultivation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                money_mindset: { type: string }
      responses:
        '200':
          description: Abundance cultivated
          content:
            application/json:
              schema:
                type: object
  /api/transitions/navigate:
    post:
      summary: Transition navigation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transition_type: { type: string }
      responses:
        '200':
          description: Transition navigated
          content:
            application/json:
              schema:
                type: object
  /api/ancestry/heal:
    post:
      summary: Ancestry healing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                family_pattern: { type: string }
      responses:
        '200':
          description: Ancestry healed
          content:
            application/json:
              schema:
                type: object
  /api/somatic/session:
    post:
      summary: Somatic healing session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body_state: { type: string }
                emotions: { type: string }
                intention: { type: string }
                who: { type: string }
                tags: { type: array, items: { type: string } }
      responses:
        '200':
          description: Somatic session result
          content:
            application/json:
              schema:
                type: object
  /api/wisdom/synthesize:
    post:
      summary: Wisdom synthesis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                life_situation: { type: string }
                specific_question: { type: string }
                wisdom_sources: { type: array, items: { type: string } }
      responses:
        '200':
          description: Wisdom synthesized
          content:
            application/json:
              schema:
                type: object
  /api/wisdom/daily-synthesis:
    get:
      summary: Daily wisdom synthesis
      responses:
        '200':
          description: Daily synthesis result
          content:
            application/json:
              schema:
                type: object
  /api/health:
    get:
      summary: System health endpoint
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                type: object
  /api/insights:
    get:
      summary: Insights placeholder
      responses:
        '200':
          description: Insights placeholder
          content:
            application/json:
              schema:
                type: object
  /api/feedback:
    post:
      summary: Feedback placeholder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Feedback placeholder
          content:
            application/json:
              schema:
                type: object
  /api/dreams/interpret:
    post:
      summary: Dreams interpretation placeholder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Dreams interpretation placeholder
          content:
            application/json:
              schema:
                type: object
  /api/energy/optimize:
    post:
      summary: Energy optimization placeholder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Energy optimization placeholder
          content:
            application/json:
              schema:
                type: object
  /kv/log:
    post:
      summary: Log to KV store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key: { type: string }
                value: { type: string }
                metadata: { type: object }
                expiration: { type: integer }
      responses:
        '200':
          description: KV log result
          content:
            application/json:
              schema:
                type: object
  /kv/get:
    get:
      summary: Get from KV store
      parameters:
        - name: key
          in: query
          schema: { type: string }
      responses:
        '200':
          description: KV get result
          content:
            application/json:
              schema:
                type: object
  /d1/exec:
    post:
      summary: Execute D1 SQL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sql: { type: string }
                params: { type: array, items: { type: string } }
      responses:
        '200':
          description: D1 exec result
          content:
            application/json:
              schema:
                type: object
  /r2/put:
    post:
      summary: Put object to R2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key: { type: string }
                base64: { type: string }
                httpMetadata: { type: object }
      responses:
        '200':
          description: R2 put result
          content:
            application/json:
              schema:
                type: object
  /r2/get:
    get:
      summary: Get object from R2
      parameters:
        - name: key
          in: query
          schema: { type: string }
      responses:
        '200':
          description: R2 get result
          content:
            application/json:
              schema:
                type: object
  /vectorize/upsert:
    post:
      summary: Upsert vector
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: string }
                text: { type: string }
                vector: { type: array, items: { type: number } }
                metadata: { type: object }
                model: { type: string }
      responses:
        '200':
          description: Vector upsert result
          content:
            application/json:
              schema:
                type: object
  /vectorize/query:
    post:
      summary: Query vector
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text: { type: string }
                vector: { type: array, items: { type: number } }
                topK: { type: integer }
                model: { type: string }
      responses:
        '200':
          description: Vector query result
          content:
            application/json:
              schema:
                type: object
  /ai/embed:
    post:
      summary: AI embed endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text: { type: string }
                model: { type: string }
      responses:
        '200':
          description: AI embed result
          content:
            application/json:
              schema:
                type: object
  /ai/generate:
    post:
      summary: AI generate endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model: { type: string }
                messages: { type: array, items: { type: object } }
      responses:
        '200':
          description: AI generate result
          content:
            application/json:
              schema:
                type: object
