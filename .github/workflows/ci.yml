name: Aquil Symbolic Engine CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Nightly run at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  guardrails:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run all guard checks
      run: npm run guard
      
    - name: Check operation count (must be 30)
      run: |
        OP_COUNT=$(jq '[.paths[]|.[]|select(.operationId)]|length' gpt-actions-schema.json)
        echo "Operation count: $OP_COUNT"
        if [ "$OP_COUNT" != "30" ]; then
          echo "❌ Operation count must be exactly 30, found $OP_COUNT"
          exit 1
        fi
        echo "✅ Operation count is correct (30)"
      
    - name: Run embedding hygiene tests
      run: node --test test/embeddingHygiene.test.js
      
    - name: Test reconcile script (dry run)
      run: npm run reconcile -- --window 1 --dry-run

  tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run all tests
      run: npm run test
      env:
        # Mirror wrangler.toml binding names for test environment
        AQUIL_DB: "test-db"
        AQUIL_MEMORIES: "test-memories" 
        AQUIL_CONTEXT: "test-context"
        AQUIL_STORAGE: "test-storage"

  acceptance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run acceptance tests
      run: npm run accept
      env:
        # Test environment bindings
        AQUIL_DB: "test-db"
        AQUIL_MEMORIES: "test-memories"
        AQUIL_CONTEXT: "test-context" 
        AQUIL_STORAGE: "test-storage"
        ACCEPTANCE_URL: "http://localhost:8787"
        
  schema-diff:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for git diff
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Generate spec diff
      run: |
        echo "## 📋 OpenAPI Schema Diff" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        npm run spec:diff >> $GITHUB_STEP_SUMMARY || true
        echo '```' >> $GITHUB_STEP_SUMMARY
        
    - name: Verify no uncommitted schema changes
      run: |
        if ! git diff --exit-code gpt-actions-schema.json; then
          echo "❌ Schema changes detected but not committed"
          echo "Run 'npm run spec:bump' to update version and commit changes"
          exit 1
        fi
        echo "✅ Schema changes are properly committed"

  schema-governance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check operation count is exactly 30
      run: |
        OP_COUNT=$(jq '[.paths[]|.[]|select(.operationId)]|length' gpt-actions-schema.json)
        echo "Operation count: $OP_COUNT"
        if [ "$OP_COUNT" != "30" ]; then
          echo "❌ Operation count must be exactly 30, found $OP_COUNT"
          echo "::error::Schema operation count violation: found $OP_COUNT operations, must be exactly 30"
          exit 1
        fi
        echo "✅ Operation count is correct (30)"
      
    - name: Check if schema files changed
      id: schema-changes
      run: |
        if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "(gpt-actions-schema\.json|scripts/.*schema.*\.mjs)"; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Schema files have changed, requiring CODEOWNERS approval"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No schema files changed"
        fi
      
    - name: Post spec diff comment
      if: steps.schema-changes.outputs.changed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          try {
            const diffOutput = execSync('npm run spec:diff', { encoding: 'utf8' });
            
            const comment = `## 🔍 Schema Changes Detected
            
This PR modifies the OpenAPI schema. Review carefully and ensure:
- Operation count remains exactly 30
- No breaking changes to existing operations
- Schema version is properly bumped if needed

### Spec Diff Output:
\`\`\`
${diffOutput}
\`\`\`

⚠️ **CODEOWNERS approval required** for schema changes.`;

            // Find existing comment and update it, or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Schema Changes Detected')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
          } catch (error) {
            console.log('Error generating spec diff:', error.message);
          }